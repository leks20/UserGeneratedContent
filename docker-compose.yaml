version: '3.10'
services:
  web:
    container_name: web
    build:
      dockerfile: ./docker/Dockerfile
      context: ./api_service/
    expose:
      - "8000"
    command: ./scripts/web/startup.sh
    depends_on:
      - kafka
      - redis
    restart: on-failure
    env_file:
      - ./api_service/conf/.env
    volumes:
      - ./api_service:/code
    networks:
      - ugc_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ugc_network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    expose:
      - "9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - ugc_network

  redis:
    image: redis:7.0
    expose:
      - "6379"
    networks:
      - ugc_network

  etl:
    container_name: etl
    expose:
      - "8001"
    build:
      dockerfile: docker/Dockerfile
      context: ./etl_kafka_to_redis
    env_file:
      - ./etl_kafka_to_redis/.env
    depends_on:
      - kafka
      - redis
    networks:
      - ugc_network

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ugc_network

  nginx:
    image: nginx:1.23
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /tmp/logs/nginx/:/var/log/nginx/
    depends_on:
      - web
    ports:
      - "80:80"
    networks:
      - ugc_network

  mongors1n1:
    container_name: mongors1n1
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27017:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data1:/data/db
    networks:
      - ugc_network

  mongors1n2:
    container_name: mongors1n2
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27027:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data2:/data/db
    networks:
      - ugc_network

  mongors1n3:
    container_name: mongors1n3
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27037:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data3:/data/db
    networks:
      - ugc_network

  mongocfg1:
    container_name: mongocfg1
    image: mongo
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config1:/data/db
    networks:
      - ugc_network

  mongocfg2:
    container_name: mongocfg2
    image: mongo
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config2:/data/db
    networks:
      - ugc_network

  mongocfg3:
    container_name: mongocfg3
    image: mongo
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config3:/data/db
    networks:
      - ugc_network

  mongos1:
    container_name: mongos1
    image: mongo
    depends_on:
      - mongocfg1
      - mongocfg2
    command: mongos --configdb mongors1conf/mongocfg1:27017,mongocfg2:27017,mongocfg3:27017 --port 27017 --bind_ip_all
    ports:
      - 27019:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ugc_network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.2
    depends_on:
      - elasticsearch
    environment:
      XPACK_MONITORING_ENABLED: "false"
      ES_HOST: "elasticsearch:9200"
    ports:
      - "5044:5044/udp"
    volumes:
      - ./logs/logstash.conf:/config/logstash.conf:ro
      - /tmp/logs/nginx/:/var/log/nginx/:ro
    command: logstash -f /config/logstash.conf
    networks:
      - ugc_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      discovery.type: single-node
    ports:
      - 9200:9200
    volumes:
      - /tmp/esdata:/tmp/elasticsearch/data
    networks:
    - ugc_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - ugc_network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.3.2
    volumes:
      - /tmp/logs/nginx:/var/log/nginx:ro
      - ./logs/filebeat.yml:/usr/share/filebeat/filebeat.yml
    depends_on:
      - web
      - nginx
      - logstash
      - elasticsearch
      - kibana
    links:
      - logstash
    networks:
      - ugc_network


networks:
  ugc_network:
    name: ugc_network
    external: true
